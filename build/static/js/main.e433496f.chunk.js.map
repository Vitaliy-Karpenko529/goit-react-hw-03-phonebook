{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.jsx","components/ContactsList/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","components/ContactsForm/ContactsForm.jsx","App.js","index.js","components/ContactsForm/ContactsForm.module.css"],"names":["module","exports","Filter","value","onChange","className","s","label","type","input","ContactsListItem","contact","onDeleteContact","information","name","number","button","onClick","id","ContactsList","contacts","length","message","list","map","item","ContactsForm","state","nameId","nanoid","telId","handleSubmit","e","preventDefault","reset","props","onSubmit","handleChange","currentTarget","setState","form","this","htmlFor","placeholder","pattern","title","required","Component","App","filter","addContact","newContact","find","toLowerCase","alert","deleteContact","contactId","previousState","handleChangeFilter","getFilteredContacts","filtered","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,uCCAxDD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,2BAA2B,KAAO,2BAA2B,OAAS,6BAA6B,QAAU,8BAA8B,YAAc,oC,gJCqBrMC,EAnBA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvB,OACE,wBAAOC,UAAWC,IAAEC,MAApB,4BAEE,uBACEH,SAAUA,EACVI,KAAK,OACLH,UAAWC,IAAEG,MACbN,MAAOA,Q,gBCgBAO,EAxBU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACvB,qCACE,uBAAMP,UAAWC,IAAEO,YAAnB,UACGF,EAAQG,KADX,KACmBH,EAAQI,UAE3B,wBACEV,UAAWC,IAAEU,OACbR,KAAK,SACLS,QAAS,kBAAML,EAAgBD,EAAQO,KAHzC,wBCuBWC,EA3BM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUR,EAAb,EAAaA,gBAAb,OACC,IAApBQ,EAASC,OACP,qBAAKhB,UAAWC,IAAEgB,QAAlB,0BAEA,oBAAIjB,UAAWC,IAAEiB,KAAjB,SACGH,EAASI,KAAI,SAAAb,GAAO,OACnB,oBAAqBN,UAAWC,IAAEmB,KAAlC,SACE,cAAC,EAAD,CACEb,gBAAiBA,EACjBD,QAASA,KAHJA,EAAQO,U,+BCLnBQ,E,4MACJC,MAAQ,CACNb,KAAM,GACNC,OAAQ,I,EAGVa,OAASC,c,EACTC,MAAQD,c,EAORE,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKC,QACL,EAAKC,MAAMC,SAAS,EAAKT,Q,EAG3BU,aAAe,SAAAL,GACb,MAAwBA,EAAEM,cAAlBxB,EAAR,EAAQA,KAAMX,EAAd,EAAcA,MACd,EAAKoC,SAAL,eAAiBzB,EAAOX,K,EAG1B+B,MAAQ,WACN,EAAKK,SAAS,CAAEzB,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,OACE,uBAAMV,UAAWC,IAAEkC,KAAMJ,SAAUK,KAAKV,aAAxC,UACE,wBAAO1B,UAAWC,IAAEC,MAAOmC,QAASD,KAAKb,OAAzC,iBAEE,uBACEvB,UAAWC,IAAEG,MACbkC,YAAY,WACZxC,MAAOsC,KAAKd,MAAMb,KAClB8B,QAAQ,yHACRC,MAAM,yIACNrC,KAAK,OACLM,KAAK,OACLgC,UAAQ,EACR1C,SAAUqC,KAAKJ,aACfnB,GAAIuB,KAAKb,YAIb,wBAAOvB,UAAWC,IAAEC,MAAOmC,QAASD,KAAKX,MAAzC,mBAEE,uBACEzB,UAAWC,IAAEG,MACbD,KAAK,MACLoC,QAAQ,yFACRC,MAAM,+FACN1C,MAAOsC,KAAKd,MAAMZ,OAClB4B,YAAY,YACZ7B,KAAK,SACLgC,UAAQ,EACR1C,SAAUqC,KAAKJ,aACfnB,GAAIuB,KAAKX,WAGb,wBAAQzB,UAAWC,IAAEU,OAAQR,KAAK,SAAlC,gC,GA/DmBuC,aAuEZrB,ICrETsB,E,4MACJrB,MAAQ,CACNP,SAAU,CACR,CAAEF,GAAI,OAAQJ,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEG,GAAI,OAAQJ,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEG,GAAI,OAAQJ,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEG,GAAI,OAAQJ,KAAM,iBAAkBC,OAAQ,cAEhDkC,OAAQ,I,EA6BVC,WAAa,YAAuB,IAApBpC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACZK,EAAa,EAAKO,MAAlBP,SACF+B,EAAa,CACjBjC,GAAIW,cACJf,OACAC,UAGFK,EAASgC,MACP,SAAAzC,GAAO,OAAIwC,EAAWrC,KAAKuC,gBAAkB1C,EAAQG,KAAKuC,iBAExDC,MAAM,GAAD,OAAIH,EAAWrC,KAAf,2BACL,EAAKyB,UAAS,gBAAGnB,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAE+B,GAAH,mBAAkB/B,S,EAIlCmC,cAAgB,SAAAC,GACd,EAAKjB,UAAS,SAAAkB,GAAa,MAAK,CAC9BrC,SAAUqC,EAAcrC,SAAS6B,QAC/B,SAAAtC,GAAO,OAAIA,EAAQO,KAAOsC,U,EAKhCE,mBAAqB,SAAA1B,GACnB,EAAKO,SAAS,CAAEU,OAAQjB,EAAEM,cAAcnC,S,EAG1CwD,oBAAsB,WACpB,MAA6B,EAAKhC,MAA1BsB,EAAR,EAAQA,OAAQ7B,EAAhB,EAAgBA,SACVwC,EAAWX,EAAOI,cACxB,OAAOjC,EAAS6B,QAAO,SAAAtC,GAAO,OAC5BA,EAAQG,KAAKuC,cAAcQ,SAASD,O,uDAhDxC,WACE,IAAMxC,EAAW0C,aAAaC,QAAQ,YAChCC,EAAiBC,KAAKC,MAAM9C,GAE9B4C,GACFvB,KAAKF,SAAS,CAAEnB,SAAU4C,M,gCAI9B,SAAmBG,EAAWC,GACxB3B,KAAKd,MAAMP,WAAagD,EAAUhD,UACpC0C,aAAaO,QAAQ,WAAYJ,KAAKK,UAAU7B,KAAKd,MAAMP,a,oBAyC/D,WACE,IAAQ6B,EAAWR,KAAKd,MAAhBsB,OACFsB,EAAmB9B,KAAKkB,sBAE9B,OACE,gCACE,2CACA,cAAC,EAAD,CAAcvB,SAAUK,KAAKS,aAE7B,0CACA,cAAC,EAAD,CAAQ/C,MAAO8C,EAAQ7C,SAAUqC,KAAKiB,qBACtC,cAAC,EAAD,CACEtC,SAAUmD,EACV3D,gBAAiB6B,KAAKc,uB,GAvFdR,aA8FHC,IChGfwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1B5E,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,KAAO,2BAA2B,MAAQ,4BAA4B,OAAS,gC","file":"static/js/main.e433496f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3pWZ9\",\"input\":\"Filter_input__3gKG7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__396jy\",\"item\":\"ContactsList_item__3RhOo\",\"info\":\"ContactsList_info__XQtrI\",\"button\":\"ContactsList_button__4Cfu5\",\"message\":\"ContactsList_message__1tG3s\",\"information\":\"ContactsList_information__1Vv52\"};","import s from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={s.label}>\r\n      Search contacts\r\n      <input\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        className={s.input}\r\n        value={value}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactsList.module.css';\r\n\r\nconst ContactsListItem = ({ contact, onDeleteContact }) => (\r\n  <>\r\n    <span className={s.information}>\r\n      {contact.name}: {contact.number}\r\n    </span>\r\n    <button\r\n      className={s.button}\r\n      type=\"button\"\r\n      onClick={() => onDeleteContact(contact.id)}\r\n    >\r\n      Delete\r\n    </button>\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    number: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import s from './ContactsList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport ContactsListItem from './ContactsListItem';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) =>\r\n  contacts.length === 0 ? (\r\n    <div className={s.message}>No contacts!</div>\r\n  ) : (\r\n    <ul className={s.list}>\r\n      {contacts.map(contact => (\r\n        <li key={contact.id} className={s.item}>\r\n          <ContactsListItem\r\n            onDeleteContact={onDeleteContact}\r\n            contact={contact}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactsForm.module.css';\r\nimport React, { Component } from 'react';\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameId = nanoid();\r\n  telId = nanoid();\r\n\r\n  static propTypes = {\r\n    number: PropTypes.string,\r\n    name: PropTypes.string,\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.reset();\r\n    this.props.onSubmit(this.state);\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={s.form} onSubmit={this.handleSubmit}>\r\n        <label className={s.label} htmlFor={this.nameId}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            placeholder=\"Don Omar\"\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            required\r\n            onChange={this.handleChange}\r\n            id={this.nameId}\r\n          />\r\n        </label>\r\n\r\n        <label className={s.label} htmlFor={this.telId}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            type=\"tel\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            value={this.state.number}\r\n            placeholder=\"555-55-55\"\r\n            name=\"number\"\r\n            required\r\n            onChange={this.handleChange}\r\n            id={this.telId}\r\n          />\r\n        </label>\r\n        <button className={s.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactsForm;\r\n","import React, { Component } from 'react';\nimport Filter from './components/Filter/Filter';\nimport PropTypes from 'prop-types';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport ContactsForm from './components/ContactsForm/ContactsForm';\nimport { nanoid } from 'nanoid';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    filter: PropTypes.string,\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    contacts.find(\n      contact => newContact.name.toLowerCase() === contact.name.toLowerCase(),\n    )\n      ? alert(`${newContact.name} you heve this contact`)\n      : this.setState(({ contacts }) => ({\n          contacts: [newContact, ...contacts],\n        }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(previousState => ({\n      contacts: previousState.contacts.filter(\n        contact => contact.id !== contactId,\n      ),\n    }));\n  };\n\n  handleChangeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const filtered = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filtered),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.handleChangeFilter} />\n        <ContactsList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactsForm_label__2b5e7\",\"form\":\"ContactsForm_form__1gGVT\",\"input\":\"ContactsForm_input__3elj6\",\"button\":\"ContactsForm_button__3BQc1\"};"],"sourceRoot":""}